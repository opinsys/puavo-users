<div id="usersList"></div>

<% content_for :javascript do %>
<%= javascript_include_tag "i18n/supertable." + I18n.locale.to_s + ".js", skip_pipeline: true %>
<%= javascript_include_tag 'modal_dialog', skip_pipeline: true %>
<%= javascript_include_tag 'supertable', skip_pipeline: true %>
<% end %>

<% content_for :post_load_javascript do %>
<script>

// Table column definitions
const USER_COLUMN_DEFS = {
    id: {
        key: "id",
        title: "<%= t('columns.puavoid') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_INTEGER,
        defaultOperator: OPERATOR_EQUAL,
    },

    first: {
        key: "first",
        title: "<%= t('columns.users.first_names') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    last: {
        key: "last",
        title: "<%= t('columns.users.last_name') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    name: {
        key: "name",
        title: "<%= t('columns.users.full_name') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_STRING,
        subType: COLUMN_SUBTYPE_USER_USERNAME,
        defaultOperator: OPERATOR_EQUAL,
    },

    uid: {
        key: "uid",
        title: "<%= t('columns.users.uid') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    eid: {
        key: "eid",
        title: "<%= t('columns.users.eid') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    type: {
        key: "type",
        title: "<%= t('columns.users.type') %>",
        flags: COLUMN_FLAG_SORTABLE | COLUMN_FLAG_SPLIT,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    phone: {
        key: "phone",
        title: "<%= t('columns.users.phone') %>",
        flags: COLUMN_FLAG_SORTABLE | COLUMN_FLAG_SPLIT,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    email: {
        key: "email",
        title: "<%= t('columns.users.email') %>",
        flags: COLUMN_FLAG_SORTABLE | COLUMN_FLAG_SPLIT,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    home: {
        key: "home",
        title: "<%= t('columns.users.home_dir') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_STRING,
        defaultOperator: OPERATOR_EQUAL,
    },

    rrt: {
        key: "rrt",
        title: "<%= t('columns.users.rrt') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_UNIXTIME,
        defaultOperator: OPERATOR_EQUAL,
    },

    locked: {
        key: "locked",
        title: "<%= t('columns.users.is_locked') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_BOOLEAN,
        defaultOperator: OPERATOR_EQUAL,
    },

    created: {
        key: "created",
        title: "<%= t('columns.created') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_UNIXTIME,
        defaultOperator: OPERATOR_GREATER_OR_EQUAL,
    },

    modified: {
        key: "modified",
        title: "<%= t('columns.modified') %>",
        flags: COLUMN_FLAG_SORTABLE,
        type: COLUMN_TYPE_UNIXTIME,
        defaultOperator: OPERATOR_LESS_OR_EQUAL,
    },
};

// Default visible columns and their order
const DEFAULT_USER_COLUMNS = [
    ["id", false],
    ["name", true],
    ["first", false],
    ["last", false],
    ["uid", true],
    ["type", true],
    ["eid", false],
    ["phone", false],
    ["email", false],
    ["home", false],
    ["locked", false],
    ["rrt", false],
    ["created", false],
    ["modified", false],
];

const PRESETS = [
    {
        title: I18n.translate("filters_users.locked_users"),
        id: "locked",
        filters: [
            [true, "locked", OPERATOR_EQUAL, true],
        ],
    },

    {
        title: I18n.translate("filters_users.marked_for_deletion"),
        id: "marked_for_deletion",
        filters: [
            [true, "rrt", OPERATOR_GREATER_OR_EQUAL, [2010]],
        ],
    },

    {
        title: I18n.translate("filters_users.marked_for_deletion_not_locked"),
        id: "unlocked_deleted",
        filters: [
            [true, "locked", OPERATOR_NOT_EQUAL, true],
            [true, "rrt", OPERATOR_GREATER_OR_EQUAL, [2010]],
            [false, "eid", OPERATOR_NOT_EQUAL, "^$"],
        ],
    },

    {
        title: I18n.translate("filters_users.marked_3months"),
        id: "marked_for_3months",
        filters: [
            [true, "rrt", OPERATOR_LESS_OR_EQUAL, -60 * 60 * 24 * 90],
            [false, "eid", OPERATOR_NOT_EQUAL, "^$"],
        ],
    },

    {
        title: I18n.translate("filters_users.marked_6months"),
        id: "marked_for_6months",
        filters: [
            [true, "rrt", OPERATOR_LESS_OR_EQUAL, -60 * 60 * 24 * 180],
            [false, "eid", OPERATOR_NOT_EQUAL, "^$"],
        ],
    },

    {
        title: I18n.translate("filters_users.marked_9months"),
        id: "marked_for_9months",
        filters: [
            [true, "rrt", OPERATOR_LESS_OR_EQUAL, -60 * 60 * 24 * 270],
            [false, "eid", OPERATOR_NOT_EQUAL, "^$"],
        ],
    },

    {
        title: I18n.translate("filters_users.marked_12months"),
        id: "marked_for_12months",
        filters: [
            [true, "rrt", OPERATOR_LESS_OR_EQUAL, -60 * 60 * 24 * 365],
            [false, "eid", OPERATOR_NOT_EQUAL, "^$"],
        ],
    },
];

class MassUserDeletion extends MassOperationBase {
    constructor(parent, container)
    {
        super(parent, container);
    }

    processOneItem(item)
    {
        // Do some pre-filtering here, to prevent useless network traffic.
        // All of these tests are also done on the server end in case the
        // user tries to cheat by, for example, adjusting their system time.

        if (item.dnd)
            return [MASS_OPERATION_ITEM_FAILED, "<%= t('users.mass_operations.deletion_prevented') %>"];

        if (item.rrt === null)
            return [MASS_OPERATION_ITEM_FAILED, "<%= t('users.mass_operations.not_marked_for_deletion') %>"];

        const now = Math.floor(Date.now() / 1000);
        const next = item.rrt + (60 * 60 * 24 * 7);     // 7 days in seconds

        if (next > now)
            return [MASS_OPERATION_ITEM_FAILED, "<%= t('users.mass_operations.marked_too_recently') %>"];

        // Good to go
        const ret = doSingleNetworkPost(
            "/users/<%= @school.id %>/mass_op_user_delete",
            JSON.stringify({ id: item.id })
        );

        if (!ret.success) {
            // Something failed in doSingleNetworkPost()
            return [MASS_OPERATION_ITEM_FAILED, ret.errorMessage];
        }

        if (!ret.networkReturn.success) {
            // The actual operation failed
            return [MASS_OPERATION_ITEM_FAILED, ret.networkReturn.message];
        }

        return [MASS_OPERATION_ITEM_OK, null];
    }
};

class MassUserLocking extends MassOperationBase {
    constructor(parent, container)
    {
        super(parent, container);

        // the default state (lock)
        this.lock = true;

        container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th>${I18n.translate("massop_users.locking.action")}</th>
    <td>
        <input type="radio" name="mul_action_type" id="mul_action_lock" checked>
        <label for="mul_action_lock">${I18n.translate("massop_users.locking.lock")}</label><br>
        <input type="radio" name="mul_action_type" id="mul_action_unlock">
        <label for="mul_action_unlock">${I18n.translate("massop_users.locking.unlock")}</label>
    </td>
</tr>
</table>
</form>`;

        container.querySelector("#mul_action_lock")
            .addEventListener("click", event => this.setLockState(event, true));
        container.querySelector("#mul_action_unlock")
            .addEventListener("click", event => this.setLockState(event, false));
    }

    setLockState(event, state)
    {
        this.lock = state;
    }

    processOneItem(item)
    {
        // Do nothing if the user is already in the desired locking state
        if (item.locked == this.lock)
            return [MASS_OPERATION_ITEM_OK, null];

        const ret = doSingleNetworkPost(
            "/users/<%= @school.id %>/mass_op_user_lock",
            JSON.stringify({ id: item.id, lock: this.lock })
        );

        if (!ret.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.errorMessage];

        if (!ret.networkReturn.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.networkReturn.message];

        return [MASS_OPERATION_ITEM_OK, null];
    }
};

class MassUserMarkForDeletion extends MassOperationBase {
    constructor(parent, container)
    {
        super(parent, container);

        // the default operation (mark for deletion if not marked yet)
        this.operation = 0;

        container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th>${I18n.translate("massop_users.marking.action")}</th>
    <td>
        <input type="radio" name="mass_user_mark_action" id="mass_user_mark_mark" checked>
        <label for="mass_user_mark_mark">${I18n.translate("massop_users.marking.mark")}</label><br>
        <input type="radio" name="mass_user_mark_action" id="mass_user_mark_mark_force">
        <label for="mass_user_mark_mark_force">${I18n.translate("massop_users.marking.mark_force")}</label><br>
        <input type="radio" name="mass_user_mark_action" id="mass_user_mark_unmark">
        <label for="mass_user_mark_unmark">${I18n.translate("massop_users.marking.unmark")}</label>
    </td>
</tr>
</table>
</form>`;

        container.querySelector("#mass_user_mark_mark")
            .addEventListener("click", event => this.setOperation(event, 0));
        container.querySelector("#mass_user_mark_mark_force")
            .addEventListener("click", event => this.setOperation(event, 1));
        container.querySelector("#mass_user_mark_unmark")
            .addEventListener("click", event => this.setOperation(event, 2));
    }

    setOperation(event, op)
    {
        this.operation = op;
    }

    processOneItem(item)
    {
        // Pre-filter users, avoid useless network requests. All of these checks
        // are also done on the server end.

        if (item.dnd) {
            // deletion prevented
            return [MASS_OPERATION_ITEM_FAILED, "<%= t('users.mass_operations.deletion_prevented') %>"];
        }

        if (item.rrt === null && this.operation == 2) {
            // already unlocked
            return [MASS_OPERATION_ITEM_OK, null];
        }

        if (item.rrt !== null && this.operation == 0) {
            // already locked and not forced mode
            return [MASS_OPERATION_ITEM_OK, null];
        }

        const ret = doSingleNetworkPost(
            "/users/<%= @school.id %>/mass_op_user_mark",
            JSON.stringify({ id: item.id, operation: this.operation })
        );

        if (!ret.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.errorMessage];

        if (!ret.networkReturn.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.networkReturn.message];

        return [MASS_OPERATION_ITEM_OK, null];
    }
};

// JavaScript class fields support is so poor that I can't really
// define titles, IDs and other things in classes, they must be here
let massOperations = {
    "lock": {
        title: I18n.translate("massop_users.locking.title"),
        hasSettings: true,
        clazz: MassUserLocking
    },

    "mark_for_deletion": {
        title: I18n.translate("massop_users.marking.title"),
        hasSettings: true,
        clazz: MassUserMarkForDeletion
    },

    "delete": {
        title: I18n.translate("massop_users.deletion.title"),
        hasSettings: false,
        clazz: MassUserDeletion
    },
};

// The current columns, initially the defaults
var currentColumns = DEFAULT_USER_COLUMNS;

$(document).ready(function() {
    new SuperTable({
        // Unique ID for this table
        id: "users",

        // Organisation and school names, used during CSV exports
        organisationName: "<%= LdapOrganisation.current.o %>",
        schoolName: "<%= @school.cn %>",

        // The URL used to dynamically retrieve table data from
        url: "/users/<%= @school.id %>/get_school_users_list",

        // Where to save the table settings
        localstoreKey: "supertable-users",

        // Which locale will be used when sorting strings?
        sortLocale: "<%= supertable_sorting_locale %>",

        // Container for the table and its controls
        container: document.getElementById("usersList"),

        // Main table flags
        flags: TABLE_FLAG_USERS | TABLE_FLAG_ENABLE_SELECTION,

        // All possible columns, their titles, keys, flags, etc.
        columnDefs: USER_COLUMN_DEFS,

        // Which columns to display and in which order. You need at least one.
        currentColumns: currentColumns,

        // Default columns for this table. Used with the column editor.
        defaultColumns: DEFAULT_USER_COLUMNS,

        // The column that's initially selected on new filter rows
        defaultFilterColumn: "name",

        // Initially sorted column and its order (only SORT_ORDER_ASCENDING and SORT_ORDER_DESCENDING
        // are valid here, any other value will be ignored and the order is assumed to be ascending).
        // If the column does not exist, then the initial sort will be ignored completely.
        initialSort: { column: "name", order: SORT_ORDER_ASCENDING },

        // Premade filter presets
        filterPresets: PRESETS,

        // Mass operation definitions
        massOperations: massOperations,

        // Name of the objects the table contains. Currently always a plural.
        itemName: "<%= t('users.index.users') %>",

        // Column editor subtitle
        columnEditorSubtitle: "<%= t('layouts.application.users') %>",
    });
});

</script>

<% content_for :tools do %>
<ul>
  <li>
    <%= link_to new_user_path, class: 'btn' do %>
      <i class='icon-plus'></i><%= t('link.new_user')%>
    <% end %>
  </li>

  <li>
    <%= link_to lock_marked_users_path, data: { confirm: t('users.index.lock_marked_users') }, method: :post, class: 'btn btn-danger' do %>
      <i class='icon-lock'></i><%= t('link.lock_users_marked_for_deletion')%>
    <% end %>
  </li>

  <% if current_user.organisation_owner? %>
  <li class="ownersOnly">
    <%= link_to delete_marked_users_path, data: { confirm: t('users.index.delete_marked_users') }, method: :delete, class: 'btn btn-danger' do %>
      <i class='icon-trash'></i><%= t('link.delete_users_marked_for_deletion')%>
    <% end %>
  </li>
  <% end %>
</ul>
<% end %>

<% end %>
