/*
  Tables
*/

table {
  border-collapse: collapse;
}

th, td {
  vertical-align: middle;
  margin: 0;
  padding: 6px;
}

th {
  font-size: 110%;
  text-align: left;
  text-decoration: none;
}

/* Lists of schools, users, devices, etc. */
.list {
  width: 100%;
  color: $listFore;

  th {
    background: $listHeadingBack;
    color: $listHeadingFore;
    border-top: 1px solid $listHeadingBorder;
    border-left: 1px solid $listHeadingBorder;
    border-bottom: 1px solid $listHeadingBorder;
    padding: 10px;
    font-size: 100%;
  }

  tbody > tr:last-child {
    border-bottom: 1px solid $listHeadingBorder;
  }

  th:first-of-type {
    border-left: none;
  }

  /* Normal rows */
  tr {
    &:nth-child(odd) {
      background: $listOddRowBack;

      .selectedColumn {
        background: darken($listOddRowBack, 5%);
      }
    }

    &:nth-child(even) {
      background: $listEvenRowBack;

      .selectedColumn {
        background: darken($listEvenRowBack, 5%);
      }
    }

    &:hover {
      background: $listRowHoverBack;

      .selectedColumn {
        background: darken($listRowHoverBack, 5%);
      }
    }
  }

  /* Users who are marked for later deletion */
  tr.deleted {
    &:nth-child(odd) {
      background-color: $markedForDeletionOddRowBack;

      .selectedColumn {
        background: darken($markedForDeletionOddRowBack, 5%);
      }
    }

    &:nth-child(even) {
      background-color: $markedForDeletionEvenRowBack;

      .selectedColumn {
        background: darken($markedForDeletionEvenRowBack, 5%);
      }
    }

    &:hover {
      background: $markedForDeletionRowHoverBack;

      .selectedColumn {
        background: darken($markedForDeletionRowHoverBack, 5%) !important;
      }
    }
  }

  td {
    border-left: 1px solid $listRowBorder;
  }

  td:first-of-type {
    border-left: none;
  }

  .form {
    margin-top: 20px;
    float: left;
  }

  input[type="text"] {
    width: 15em;
  }

  input[type="submit"] {
    paddin: 0;
    margin: 0;
    width: auto;
    height: auto;
    float: right;
  }

  @media #{$screen-breakpoint-one} {
    /* Minimize lists */
    width: 100%;

    .thead, th {
      display: none;
    }

    tbody > tr:last-child {
      border-bottom: none;
    }

    tr {
      display: block;
      padding: 2%;
      border-bottom: 1px solid $listRowBorder;
    }

    td {
      display: block;
      padding: 2px;
      border: none;
    }

    td:first-of-type {
      font-size: 120%;
      padding: 6px 2px;
    }

    td[data-title]:before {
      content: attr(data-title) ":\00A0";
      font-weight: bold;
    }

    .tableActions {
      display: inline-block;

      .btn {
        font-size: 90%;
        padding: 2px 10px;
      }
    }
  }

  .boolean {    /* Boolean column checkmarks */
    text-align: center;
    display: block;
    font-size: 200%;

    @media #{$screen-breakpoint-one} {
      display: inline;
      text-align: left;
      font-size: 100%;
    }
  }
}

/* Sortable column headers. Each TH element contains a flexbox DIV that
   contains two spans: one for the title, one for the sort direction
   arrow. Flexbox is used because I want to right-align the sort arrow
   and a flexbox is the only way to do that even somewhat reliably. */
.sortHeader {
  cursor: pointer;

  &:hover {
    background: $listSortableColumnHover;
  }

  /* The container DIV */
  div {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;

    /*
      What JavaScript taketh, CSS giveth. What a mess...
      https://css-tricks.com/slightly-careful-sub-elements-clickable-things/
    */
    pointer-events: none;

    /* The child spans */
    .title {
      display: inline;
    }

    .arrow {
      display: inline;
      margin-left: auto;    /* right-align the arrow */
    }
  }
}

/* Setup the sort direction arrows */
/* TODO: The arrows should be changed in the JavaScript code, not here. */
@mixin sortCommon($padding) {
  font-family: puavo-icons;
  font-size: 120%;
  font-weight: normal;
  padding-left: $padding;
  padding-right: 10px;
};

.orderAscending, .orderDescending {
  background: $listSortableColumnHover !important;
}

.orderNone .arrow:after {
  @include sortCommon(10px);
  content: "\f0dc";       /* up arrow, down arrow */
}

.typeString.orderAscending .arrow:after {
  @include sortCommon(5px);
  content: " \f15d";      /* A -> Z */
}

.typeString.orderDescending .arrow:after {
  @include sortCommon(5px);
  content: " \f15e";      /* Z -> A */
}

.typeNumeric.orderAscending .arrow:after {
  @include sortCommon(6px);
  content: " \f162";      /* 1 -> 9 */
}

.typeNumeric.orderDescending .arrow:after {
  @include sortCommon(6px);
  content: " \f163";      /* 9 -> 1 */
}

/* Alternate colors for the "marked for deletion" users table */
.usersMarkedForDeletion {
  tr:nth-child(even) {
    background-color: $markedForDeletionEvenRowBack;
  }

  tr:nth-child(odd) {
    background-color: $markedForDeletionOddRowBack;
  }

  tr:hover {
    background: $markedForDeletionRowHoverBack;
  }

  tr:nth-child(odd) .selectedColumn {
    background: darken($markedForDeletionOddRowBack, 5%);
  }

  tr:nth-child(even) .selectedColumn {
    background: darken($markedForDeletionEvenRowBack, 5%);
  }

  tr:hover .selectedColumn {
    background: darken($markedForDeletionRowHoverBack, 5%) !important;
  }
}

/*
----------------------------------------------------------------------------------------------------
SUPERTABLES
----------------------------------------------------------------------------------------------------
*/

.superTable {
  /* Used when the table is empty, or everything in it has been filtered away */
  .empty {
    font-style: italic;
  }

  .checkbox {
    cursor: pointer;
    width: 0;

    span {
      pointer-events: none;   /* the parent TD has the event handler */
      margin: 0 auto;
      display: block;
      width: 20px;
      height: 20px;
      border: 2px inset #ccc;
      background: #fff;
    }

    &:active span {
      background: #ddd;
    }
  }

  .selected span {
    background: url("<%= image_path('checkbox.svg') %>") no-repeat #fff;
    background-size: cover;
  }

  .selected:active span {
    background: url("<%= image_path('checkbox.svg') %>") no-repeat #ddd;
    background-size: cover;
  }
}

.disabledTable {
  opacity: 0.5;
}

/* Supertable controls */
.tableControls {
  color: $listHeadingFore;
  margin-bottom: 5px;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;

  /* Column editor, CSV download, etc. buttons and status/stats messages */
  .controls {
    display: flex;
    align-items: center;

    p {
      display: inline;
      margin: 0;
      padding: 5px 10px;
      font-weight: bold;
    }

    .status {
      font-style: italic;
    }

    .good {
    }

    .failed {
      background: $supertableNetworkErrorBack !important;
      color: $supertableNetworkErrorFore !important;
      font-weight: bold;
      font-style: normal;
    }
  }

  /* Wraps everything related to table filters */
  .filters {
    width: 100%;
    border: 1px solid $listHeadingBorder;
    margin: 5px 0 0 0;
    padding: 0;

    display: flex;
    flex-direction: column;
  }

  /* Table filter control buttons */
  .filterControl {
    display: flex;
    align-items: center;

    padding: 5px;
    background: $supertableFilterControlBack;
    border-bottom: 1px dashed $supertableFilterControlBorder;

    /* Master filtering enable checkbox */
    .filteringEnabled {
      font-weight: bold;
      margin: 0 1em 0 0.5em;
    }

    label {
      margin-right: 1em;
    }

    .disabledOption {
      display: none;
    }
  }

  /* Main container for the table filters */
  .filterList {
    margin: 5px;

    flex-direction: row;
    flex-wrap: wrap;

    /* Container for each filter term */
    .filter {
      display: flex;
      align-items: center;
      padding: 2px 10px;
      margin: 0;

      &:hover {
        background: $supertableFilterListFilterHover;
      }

      /* Wrapper for term "controls" (activation checkbox, target column, operator) */
      .control {
        margin-right: 10px;

        /* vertical centering */
        display: flex;
        align-items: center;

        select {
          margin-left: 5px;
        }
      }

      /*
          Wrapper for the filtering term, whatever it may be. Some have a text input box, some have
          radio buttons, some something else.
      */
      .term {
        display: inline;

        min-width: 250px;
        min-height: 30px;   /* try to equalize heights (HACK) */
        padding: 2px;
        margin-right: 10px;

        ::placeholder {
          font-style: italic;
        }

        @media #{$screen-breakpoint-one} {
          min-width: auto;
        }

        /* A term with only one input element, use all available width */
        .single {
          width: 100%;
        }

        input {
          padding: 5px;   /* Chrome, why are you like that? Firefox plays along nicely, why can't you? */
        }

        /* Boolean terms */
        .boolean {
          display: flex;        /* a hacky attempt to center the checkbox and its label */
          align-items: center;
          padding-top: 2px;

          input, label {
            display: inline;
          }

          label {
            padding-left: 5px;
          }
        }

        /* Unixtime terms */
        .year {
          font-family: monospace;
          width: 4em;
        }

        .month, .day, .hour, .minute {
          font-family: monospace;
          width: 3em;
        }
      }

      /* Invalid terms */
      .invalid {
        background: $supertableTermInvalidBack;
      }

      /* Container for the add/remove buttons */
      .buttons {
        display: inline;

        span {
          display: inline-block;
          padding: 3px 9px;
          text-align: center;
          cursor: pointer;

          @media #{$screen-breakpoint-one} {
            padding: 0 15px;
          }
        }

        .add {
          color: $supertableFilterAddFore;
          background: $supertableFilterAddBack;
          border: 1px solid $supertableFilterAddBorder;
          margin-right: 10px;

          &:hover {
            background: $supertableFilterAddHoverBack;
          }
        }

        .remove {
          color: $supertableFilterRemoveFore;
          background: $supertableFilterRemoveBack;
          border: 1px solid $supertableFilterRemoveBorder;

          &:hover {
            background: $supertableFilterRemoveHoverBack;
          }
        }
      }
    }
  }
}
