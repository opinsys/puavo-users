/* Floating modal dialogs */

/* The dark backdrop */
#modalDialogBackdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 10000;
  background-color: rgba(0, 0, 0, 0.5);

  /* Use flexbox to center the dialog horizontally and vertically, regardless of its size */
  display: flex;
  align-items: center;
  justify-content: center;

  font-size: 90%;
}

/* Outer container for a floating dialog. Its size can be changed freely. */
#modalDialogContainer {
  display: inline;
  box-shadow: 0 0 10px #444;
  border: 2px solid #888;
  background: #f0f0f0;
}

/* This is finally the actual dialog */
.modalDialog {
  display: flex;
  flex-direction: column;

  .title {
    display: inline;
    border-bottom: 1px solid #888;
    background: #d0d0d0;
    cursor: default;
    padding: 10px;
    text-align: left;
    font-size: 120%;

    span {
      margin: 0;
      padding: 0;
      font-weight: bold;
    }

    small {
      /*padding-left: 10px;*/
    }
  }

  /* Dialog body */
  .body {
    display: inline;
    padding: 10px;
    background: #e0e0e0;
    flex: 2;  /* allocate all available space for the body */
  }

  /* The button row */
  .buttons {
    display: inline;
    border-top: 1px solid #c0c0c0;
    background: #d0d0d0;
    padding: 10px;
    text-align: center;
  }

  /*
    COPY-PASTED BUTTON STYLES FROM COMMON.SCSS! REMOVE ONCE THE INHERITANCE
    PROBLEMS HAVE BEEN FIXED!
  */
  .button {
    display: inline-block;
    padding: 5px 10px;
    cursor: pointer;
    margin-right: 10px;
    border-width: 2px;
    border-style: solid;
    border-color: $buttonBorderHi $buttonBorderLo $buttonBorderLo $buttonBorderHi;
    background: $buttonBack;
    color: $buttonFore;
    text-decoration: none;
    font-weight: normal;
    text-align: center;
  }

  .button:hover {
    background: $buttonHoverBack;
    color: $buttonFore;
  }

  .button:active, .btn:focus {
    border-color: $buttonBorderLo $buttonBorderHi $buttonBorderHi $buttonBorderLo;
    background: $buttonHoverBack;
    color: $buttonFore;
  }

  .button:last-of-type {
    margin-right: 0;
  }

  .disabled {
    opacity: 0.5;
    cursor: not-allowed;
    color: #888;

    &:hover {
      border-color: $buttonBorderHi $buttonBorderLo $buttonBorderLo $buttonBorderHi;
      background: $buttonBack;
      color: #888;
    }

    &:active, &:focus {
      border-color: $buttonBorderHi $buttonBorderLo $buttonBorderLo $buttonBorderHi;
      background: $buttonBack;
      color: #888;
    }
  }
}

/* List column editor table */
.columnTable {
  border-collapse: collapse;
  font-size: 90%;
  border: 1px solid #aaa;
  background: #fff;

  th {
    border: 1px solid #aaa;
    background: #ccc;
    padding: 5px 10px;
  }

  td {
    padding: 0;
  }

  tr td:first-child {
    text-align: center;
  }

  .visibleColumn {
    width: 0;   /* force minimum possible width */
  }

  .visibleColumn, .visibleColumn input {
    cursor: pointer;
  }

  .visibleColumn input {
    /* make the checkbox itself unclickable */
    pointer-events: none;
  }

  .nameColumn {
    cursor: default;
    width: 300px;
  }

  .selectedRow {
    /* take the colors from the system theme */
    background: #00f;
    color: #fff;
  }
}

.columnsContainer {
  display: flex;
  flex-direction: rows;
}

.columnsLeft {
  display: inline;

  /* TODO: Make the table body scrollable, not the whole table (body+header) */
  max-height: 400px;
  overflow-y: scroll;

}

.columnsRight {
  display: inline;
  margin-left: 10px;

  .button {
    display: block;
    width: 100%;
    margin-bottom: 10px;
  }
}
