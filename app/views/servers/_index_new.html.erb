<div class="superTable" id="tableServers"></div>

<% content_for :javascript do %>
<%= javascript_include_tag "i18n/supertable2." + I18n.locale.to_s + ".js", skip_pipeline: true %>
<%= javascript_include_tag 'filtereditor', skip_pipeline: true %>
<%= javascript_include_tag 'supertable2', skip_pipeline: true %>
<% end %>

<% @is_organisation = true %>

<% content_for :post_load_javascript do %>
<script>
"use strict;"

// TODO: Deduplicate this. 90% of shared/device_tables_common.js could be used verbatim here.

// Table column definitions
const COLUMN_DEFINITIONS = {
    available_images: {
        key: "available_images",
        title: "<%= t('columns.servers.available_images') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bios_date: {
        key: "bios_date",
        title: "<%= t('columns.devices.bios_date') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bios_vendor: {
        key: "bios_vendor",
        title: "<%= t('columns.devices.bios_vendor') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    bios_version: {
        key: "bios_version",
        title: "<%= t('columns.devices.bios_version') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    conf: {
        key: "conf",
        title: "<%= t('columns.puavoconf') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    cpu: {
        key: "cpu",
        title: "<%= t('columns.devices.cpu') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    created: {
        key: "created",
        title: "<%= t('columns.created') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.GTE,
    },

    current_image: {
        key: "current_image",
        title: "<%= t('columns.devices.current_image') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
    },

    desc: {
        key: "desc",
        title: "<%= t('columns.devices.description') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    df_home: {
        key: "df_home",
        title: "<%= t('columns.devices.df_home') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    df_images: {
        key: "df_images",
        title: "<%= t('columns.devices.df_images') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    df_state: {
        key: "df_state",
        title: "<%= t('columns.devices.df_state') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    df_tmp: {
        key: "df_tmp",
        title: "<%= t('columns.devices.df_tmp') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    hd: {
        key: "hd",
        title: "<%= t('columns.devices.hwinfo_hd_size') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.LT,
    },

    hd_ssd: {
        key: "hd_ssd",
        title: "<%= t('columns.devices.hwinfo_is_ssd') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.BOOL,
        defaultOperator: FilterOperator.EQU,
    },

    hn: {
        key: "hn",
        title: "<%= t('columns.devices.hostname') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    hw_time: {
        key: "hw_time",
        title: "<%= t('columns.devices.hwinfo_time') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    id: {
        key: "id",
        title: "<%= t('columns.puavoid') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.EQU,
    },

    image: {
        key: "image",
        title: "<%= t('columns.devices.image') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    krn_args: {
        key: "krn_args",
        title: "<%= t('columns.devices.kernel_args') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    krn_ver: {
        key: "krn_ver",
        title: "<%= t('columns.devices.kernel_version') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    location: {
        key: "location",
        title: "<%= t('columns.devices.location') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    lspci: {
        key: "lspci",
        title: "<%= t('columns.devices.lspci') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    lsusb: {
        key: "lsusb",
        title: "<%= t('columns.devices.lsusb') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    mac: {
        key: "mac",
        title: "<%= t('columns.devices.mac') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    mfer: {
        key: "mfer",
        title: "<%= t('columns.devices.manufacturer') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    model: {
        key: "model",
        title: "<%= t('columns.devices.model') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    modified: {
        key: "modified",
        title: "<%= t('columns.modified') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    monitors_xml: {
        key: "monitors_xml",
        title: "<%= t('columns.devices.monitors_xml') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_date: {
        key: "purchase_date",
        title: "<%= t('columns.devices.purchase_date') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    purchase_loc: {
        key: "purchase_loc",
        title: "<%= t('columns.devices.purchase_loc') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_support: {
        key: "purchase_support",
        title: "<%= t('columns.devices.purchase_support') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_url: {
        key: "purchase_url",
        title: "<%= t('columns.devices.purchase_url') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    purchase_warranty: {
        key: "purchase_warranty",
        title: "<%= t('columns.devices.purchase_warranty') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.UNIXTIME,
        defaultOperator: FilterOperator.LTE,
    },

    ram: {
        key: "ram",
        title: "<%= t('columns.devices.hwinfo_ram_size') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.INTEGER,
        defaultOperator: FilterOperator.LT,
    },

    schools: {
        key: "schools",
        title: "<%= t('columns.servers.schools') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.USER_TRANSFORM,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    serial: {
        key: "serial",
        title: "<%= t('columns.devices.serial') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    tags: {
        key: "tags",
        title: "<%= t('columns.devices.tags') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    wifi: {
        key: "wifi",
        title: "<%= t('columns.devices.wifi') %>",
        flags: ColumnFlag.SORTABLE,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },

    xrandr: {
        key: "xrandr",
        title: "<%= t('columns.devices.xrandr') %>",
        flags: ColumnFlag.SORTABLE | ColumnFlag.ARRAY,
        type: ColumnType.STRING,
        defaultOperator: FilterOperator.EQU,
    },
};

// Localized column titles
const COLUMN_TITLES = {
    available_images: "<%= t('columns.servers.available_images') %>",
    bios_date: "<%= t('columns.devices.bios_date') %>",
    bios_vendor: "<%= t('columns.devices.bios_vendor') %>",
    bios_version: "<%= t('columns.devices.bios_version') %>",
    conf: "<%= t('columns.puavoconf') %>",
    cpu: "<%= t('columns.devices.cpu') %>",
    created: "<%= t('columns.created') %>",
    current_image: "<%= t('columns.devices.current_image') %>",
    desc: "<%= t('columns.devices.description') %>",
    df_home: "<%= t('columns.devices.df_home') %>",
    df_images: "<%= t('columns.devices.df_images') %>",
    df_state: "<%= t('columns.devices.df_state') %>",
    df_tmp: "<%= t('columns.devices.df_tmp') %>",
    hd: "<%= t('columns.devices.hwinfo_hd_size') %>",
    hd_ssd: "<%= t('columns.devices.hwinfo_is_ssd') %>",
    hn: "<%= t('columns.devices.hostname') %>",
    hw_time: "<%= t('columns.devices.hwinfo_time') %>",
    id: "<%= t('columns.puavoid') %>",
    image: "<%= t('columns.devices.image') %>",
    krn_args: "<%= t('columns.devices.kernel_args') %>",
    krn_ver: "<%= t('columns.devices.kernel_version') %>",
    location: "<%= t('columns.devices.location') %>",
    lspci: "<%= t('columns.devices.lspci') %>",
    lsusb: "<%= t('columns.devices.lsusb') %>",
    mac: "<%= t('columns.devices.mac') %>",
    mfer: "<%= t('columns.devices.manufacturer') %>",
    model: "<%= t('columns.devices.model') %>",
    modified: "<%= t('columns.modified') %>",
    monitors_xml: "<%= t('columns.devices.monitors_xml') %>",
    user: "<%= t('columns.devices.primary_user') %>",
    purchase_date: "<%= t('columns.devices.purchase_date') %>",
    purchase_loc: "<%= t('columns.devices.purchase_loc') %>",
    purchase_support: "<%= t('columns.devices.purchase_support') %>",
    purchase_url: "<%= t('columns.devices.purchase_url') %>",
    purchase_warranty: "<%= t('columns.devices.purchase_warranty') %>",
    ram: "<%= t('columns.devices.hwinfo_ram_size') %>",
    schools: "<%= t('columns.servers.schools') %>",
    serial: "<%= t('columns.devices.serial') %>",
    tags: "<%= t('columns.devices.tags') %>",
    wifi: "<%= t('columns.devices.wifi') %>",
    xrandr: "<%= t('columns.devices.xrandr') %>",
};

// The default order for columns
const COLUMN_ORDER = [
    "id",
    "hn",
    "mac",
    "schools",
    "available_images",
    "location",
    "image",
    "current_image",
    "tags",
    "mfer",
    "model",
    "serial",
    "desc",
    "krn_args",
    "krn_ver",
    "created",
    "modified",
    "conf",
    "user",
    "hw_time",
    "ram",
    "hd",
    "hd_ssd",
    "df_home",
    "df_images",
    "df_state",
    "df_tmp",
    "cpu",
    "bios_vendor",
    "bios_version",
    "bios_date",
    "bat_vendor",
    "bat_serial",
    "bat_cap",
    "bat_pcnt",
    "bat_volts",
    "wifi",
    "xrandr",
    "monitors_xml",
    "lspci",
    "lsusb",
    "abitti_version",
    "windows_license",
    "purchase_date",
    "purchase_warranty",
    "purchase_loc",
    "purchase_url",
    "purchase_support",
];

const USER_TRANSFORM_FUNCTIONS = {
    available_images: function(entry) {
        let display = [],
            value = [];

        for (const i of entry.available_images) {
            if (i.release)
                display.push(`${i.file} <span class="releaseName">(${i.release})</span>`);
            else display.push(`${i.file}`);

            value.push(i.file);
        }

        return [display.join('<br>'), value.join(',')];
    },

    desc: function(entry) {
        return [
            escapeHTML(entry.desc),
            entry.desc,
        ]
    },

    hn: function(entry) {
        return [
            `<a href="${entry.link}">${escapeHTML(entry.hn)}</a>`,
            entry.hn
        ];
    },

    purchase_date: function(entry) {
        const ts = convertTimestampDateOnly(entry.purchase_date);

        return [
            ts[0] === true ? ts[1] : "?",
            entry.purchase_date
        ];
    },

    purchase_warranty: function(entry) {
        const ts = convertTimestampDateOnly(entry.purchase_warranty);

        return [
            ts[0] === true ? ts[1] : "?",
            entry.purchase_warranty
        ];
    },

    monitors_xml: function(entry) {
        // It's actually XML, but HTML escaping can handle it
        return ["<pre>" + escapeHTML(entry.monitors_xml[0]) + "</pre>", entry.monitors_xml];
    },

    schools: function(entry) {
        let display = [],
            value = [];

        for (const sch of entry.schools) {
            if (sch.valid) {
                display.push(`<a href="${sch.link}">${sch.title}</a>`);
                value.push(sch.title);
            } else {
                display.push(`<span class="missingData">${sch.dn}</span>`);
                value.push('?');
            }
        }

        return [display.join("<br>"), value.join(',')];
    }
};

function userActions(item)
{
    let html = "";

    html += `<a href="${item['link']}/edit" class="btn"><%= t('link.edit') %></a> `;

    let message = "<%= t('general_confirm') %>";

    html += `<a href="${item['link']}" data-method="delete" data-confirm="${message}" rel="nofollow" class="btn btn-danger"><%= t('link.destroy') %></a>`

    return html;
}

const DEFAULT_COLUMNS = ["hn", "mac", "schools", "available_images", "location", "mfer", "model", "serial"];
const DEFAULT_SORTING = { column: "hn", dir: SortOrder.ASCENDING };

window.onload = function(e) {

new SuperTable(
    // Main container DIV
    document.getElementById("tableServers"),

    // Settings
    {
        id: "servers",
        csvPrefix: `<%= LdapOrganisation.current.o %>-servers`,
        flags: TableFlag.ALLOW_FILTERING | TableFlag.ALLOW_COLUMN_CHANGES,

        locale: "<%= supertable_sorting_locale %>",

        columnDefinitions: COLUMN_DEFINITIONS,
        columnTitles: COLUMN_TITLES,
        columnOrder: COLUMN_ORDER,
        userTransforms: USER_TRANSFORM_FUNCTIONS,
        actions: userActions,
        massOperations: null,
        defaultColumns: DEFAULT_COLUMNS,
        defaultSorting: DEFAULT_SORTING,
        filterPresets: null,
        initialFilters: null,
        defaultFilterColumn: "hn",

        // The URL to get the data from
        source: "/devices/get_servers_list",
    }
);
};

</script>
<% end %>
