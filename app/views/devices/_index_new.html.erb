<div id="devicesList"></div>

<% content_for :javascript do %>
<%= javascript_include_tag "i18n/supertable." + I18n.locale.to_s + ".js", skip_pipeline: true %>
<%= javascript_include_tag 'modal_dialog', skip_pipeline: true %>
<%= javascript_include_tag 'supertable', skip_pipeline: true %>
<% end %>

<% content_for :post_load_javascript do %>
<script>

// Table column definitions
const DEVICE_COLUMN_DEFS = {
<%= render :partial => 'shared/device_columns.js' %>
};

// Default visible columns and their order
const DEFAULT_DEVICE_COLUMNS = [
    ["id", false],
    ["hn", true],
    ["type", true],
    ["tags", false],
    ["mfer", true],
    ["model", true],
    ["serial", true],
    ["mac", true],
    ["desc", false],
    ["image", true],
    ["current_image", true],
    ["krn_args", false],
    ["krn_ver", false],
    ["created", false],
    ["modified", false],
    ["conf", false],
    ["hw_time", false],
    ["ram", false],
    ["hd", false],
    ["hd_ssd", false],
    ["df_home", false],
    ["cpu", false],
    ["bios_vendor", false],
    ["bios_version", false],
    ["bios_date", false],
    ["bat_vendor", false],
    ["bat_serial", false],
    ["bat_cap", false],
    ["wifi", false],
    ["xrandr", false],
    ["abitti_version", false],
    ["windows_license", false],
];

const PRESETS = [
<%= render :partial => 'shared/device_presets.js' %>
];

class MassDeviceDeletion extends MassOperationBase {
    constructor(parent, container)
    {
        super(parent, container);
    }

    processOneItem(item)
    {
        const ret = doSingleNetworkPost(
            "/devices/<%= @school.id %>/mass_op_device_delete",
            JSON.stringify({"id": item.id})
        );

        if (!ret.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.errorMessage];

        if (!ret.networkReturn.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.networkReturn.message];

        return [MASS_OPERATION_ITEM_OK, null];
    }
};

class MassDeviceSetFieldValue extends MassOperationBase {
    constructor(parent, container)
    {
        super(parent, container);

        container.innerHTML = `
<form>
<table class="settingsChild">
<tr>
    <th><label for="mass_device_set_field_name"><%= t('devices.index.mass_operations.set_field.field') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.set_field.field') %></div>
        <select id="mass_device_set_field_name">
            <option value="image"><%= t('devices.index.mass_operations.set_field.desktop_image') %></option>
            <option value="kernelargs"><%= t('devices.index.mass_operations.set_field.kernel_args') %></option>
            <option value="kernelversion"><%= t('devices.index.mass_operations.set_field.kernel_version') %></option>
            <option value="puavoconf"><%= t('devices.index.mass_operations.set_field.puavoconf_replace') %></option>
            <option value="tags"><%= t('devices.index.mass_operations.set_field.tags_replace') %></option>
            <option value="manufacturer"><%= t('devices.index.mass_operations.set_field.manufacturer') %></option>
            <option value="model"><%= t('devices.index.mass_operations.set_field.model') %></option>
            <option value="serial"><%= t('devices.index.mass_operations.set_field.serial') %></option>
        </select>
    </td>
</tr>
<tr>
    <th><label for="mass_device_set_field_value"><%= t('devices.index.mass_operations.set_field.value') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.set_field.value') %></div>
        <input type="text" id="mass_device_set_field_value">
        <p class="validityWarning"><%= t('devices.index.mass_operations.set_field.validity_warning') %></p>
    </td>
</tr>
</table>
</form>`;

        this.field = container.querySelector("#mass_device_set_field_name");
        this.value = container.querySelector("#mass_device_set_field_value");
    }

    processOneItem(item)
    {
        const ret = doSingleNetworkPost(
            "/devices/<%= @school.id %>/mass_op_device_set_field",
            JSON.stringify({
                id: item.id,
                field: this.field.value,
                value: this.value.value
            })
        );

        if (!ret.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.errorMessage];

        if (!ret.networkReturn.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.networkReturn.message];

        return [MASS_OPERATION_ITEM_OK, null];
    }
};

class MassDevicePuavoconfEditor extends MassOperationBase {
    constructor(parent, container)
    {
        super(parent, container);

        container.innerHTML =
`<form>
<table class="settingsChild">
<tr>
    <th><label for="mass_device_pc_key"><%= t('devices.index.mass_operations.puavoconf.key') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.key') %></div>
        <input type="text" id="mass_device_pc_key">
    </td>
</tr>
<tr>
    <th><label for="mass_device_pc_value"><%= t('devices.index.mass_operations.puavoconf.value') %></label></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.value') %></div>
        <input type="text" id="mass_device_pc_value">
        <p class="validityWarning"><%= t('devices.index.mass_operations.puavoconf.validity_warning') %></p>
    </td>
</tr>
<tr>
    <th><%= t('devices.index.mass_operations.puavoconf.type') %></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.type') %></div>
        <input type="radio" name="mass_device_pc_type" id="mass_device_pc_type_string" checked>
        <label for="mass_device_pc_type_string"><%= t('devices.index.mass_operations.puavoconf.type_string') %></label>
        <input type="radio" name="mass_device_pc_type" id="mass_device_pc_type_int">
        <label for="mass_device_pc_type_int"><%= t('devices.index.mass_operations.puavoconf.type_int') %></label>
        <input type="radio" name="mass_device_pc_type" id="mass_device_pc_type_bool">
        <label for="mass_device_pc_type_bool"><%= t('devices.index.mass_operations.puavoconf.type_bool') %></label>
    </td>
</tr>
<tr>
    <th><%= t('devices.index.mass_operations.puavoconf.action') %></th>
    <td>
        <div class="mobileTitle"><%= t('devices.index.mass_operations.puavoconf.action') %></div>
        <input type="radio" name="mass_device_pc_action" id="mass_device_pc_action_add" checked>
        <label for="mass_device_pc_action_add"><%= t('devices.index.mass_operations.puavoconf.add') %></label><br>
        <input type="radio" name="mass_device_pc_action" id="mass_device_pc_action_remove">
        <label for="mass_device_pc_action_remove"><%= t('devices.index.mass_operations.puavoconf.remove') %></label>
    </td>
</tr>
</table>
</form>`;

        this.key = container.querySelector("#mass_device_pc_key");
        this.value = container.querySelector("#mass_device_pc_value");
        this.action = 0;
        this.type = "string";

        container.querySelector("#mass_device_pc_action_add")
            .addEventListener("click", event => this.setAction(event, 0));
        container.querySelector("#mass_device_pc_action_remove")
            .addEventListener("click", event => this.setAction(event, 1));

        container.querySelector("#mass_device_pc_type_string")
            .addEventListener("click", event => this.setType(event, "string"));
        container.querySelector("#mass_device_pc_type_int")
            .addEventListener("click", event => this.setType(event, "int"));
        container.querySelector("#mass_device_pc_type_bool")
            .addEventListener("click", event => this.setType(event, "bool"));
    }

    setAction(event, action)
    {
        this.action = action;
    }

    setType(event, type)
    {
        this.type = type;
    }

    processOneItem(item)
    {
        const ret = doSingleNetworkPost(
            "/devices/<%= @school.id %>/mass_op_device_edit_puavoconf",
            JSON.stringify({
                id: item.id,
                key: this.key.value,
                value: this.value.value,
                type: this.type,
                action: this.action
            })
        );

        if (!ret.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.errorMessage];

        if (!ret.networkReturn.success)
            return [MASS_OPERATION_ITEM_FAILED, ret.networkReturn.message];

        return [MASS_OPERATION_ITEM_OK, null];
    }
};

// JavaScript class fields support is so poor that I can't really
// define titles, IDs and other things in classes, they must be here
let massOperations = {
    "puavoconf_edit": {
        title: "<%= t('devices.index.mass_operations.puavoconf.title') %>",
        hasSettings: true,
        clazz: MassDevicePuavoconfEditor
    },

    "set_field": {
        title: "<%= t('devices.index.mass_operations.set_field.title') %>",
        hasSettings: true,
        clazz: MassDeviceSetFieldValue
    },

    "delete": {
        title: "<%= t('devices.index.mass_operations.delete.title') %>",
        hasSettings: false,
        clazz: MassDeviceDeletion
    },
};

// The current columns, initially the defaults
var currentColumns = DEFAULT_DEVICE_COLUMNS;

$(document).ready(function() {
    new SuperTable({
        // Unique ID for this table
        id: "devices",

        // Organisation and school names, used during CSV exports
        organisationName: "<%= LdapOrganisation.current.o %>",
        schoolName: "<%= @school.cn %>",

        // The URL used to dynamically retrieve table data from
        url: "/devices/<%= @school.id %>/get_school_devices_list",

        // Where to save the table settings
        localstoreKey: "supertable-devices",

        // Which locale will be used when sorting strings?
        sortLocale: "<%= supertable_sorting_locale %>",

        // Container for the table and its controls
        container: document.getElementById("devicesList"),

        // Main table flags
<% if current_user && current_user.organisation_owner? %>
        flags: TABLE_FLAG_DEVICES | TABLE_FLAG_ENABLE_SELECTION,
<% else %>
        flags: TABLE_FLAG_DEVICES,
<% end %>
        // All possible columns, their titles, keys, flags, etc.
        columnDefs: DEVICE_COLUMN_DEFS,

        // Which columns to display and in which order. You need at least one.
        currentColumns: currentColumns,

        // Default columns for this table. Used with the column editor.
        defaultColumns: DEFAULT_DEVICE_COLUMNS,

        // The column that's initially selected on new filter rows
        defaultFilterColumn: "hn",

        // Initially sorted column and its order (only SORT_ORDER_ASCENDING and SORT_ORDER_DESCENDING
        // are valid here, any other value will be ignored and the order is assumed to be ascending).
        // If the column does not exist, then the initial sort will be ignored completely.
        initialSort: { column: "hn", order: SORT_ORDER_ASCENDING },

        // Premade filter presets
        filterPresets: PRESETS,

        // Mass operation definitions
        massOperations: massOperations,

        // Name of the objects the table contains. Currently always a plural.
        itemName: "<%= t('devices.index.devices') %>",

        // Column editor subtitle
        columnEditorSubtitle: "<%= t('layouts.application.devices') %>",
    });
});

</script>
<% end %>

<% content_for :tools do %>
<ul>
  <li id="addNewDeviceTitle">
    <%= form_for(@device, :url => new_device_path(@school), html: { method: :get }) do |f| %>
    <span><%= t('devices.index.add_new_device') %>:</span>
    <%= select_tag "device_type",
        options_for_select( @device_types ) %>
      <%= f.submit t('link.add'), id: "device_submit" %>
    <% end %>
  </li>
</ul>
<% end %>
